wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
chmod +x Miniconda3-latest-Linux-x86_64.sh
./Miniconda3-latest-Linux-x86_64.sh

sudo apt update
wget https://repo.mongodb.org/apt/ubuntu/dists/jammy/mongodb-org/7.0/multiverse/binary-amd64/mongodb-org-server_7.0.0_amd64.deb
sudo dpkg -i mongodb-org-server_7.0.0_amd64.deb
sudo apt-get install -f
sudo service mongod start
sudo systemctl enable mongod


sudo apt update
sudo apt install apache2


chmod +x install.sh
./install.sh



https://drive.google.com/drive/folders/1absiNmWlXzMpvKdXfetzuBwd2D9S6X_W?usp=sharing

#!/bin/bash

# Install Miniconda
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
chmod +x Miniconda3-latest-Linux-x86_64.sh
./Miniconda3-latest-Linux-x86_64.sh -b -p ~/miniconda3
export PATH=~/miniconda3/bin:$PATH
echo "export PATH=~/miniconda3/bin:\$PATH" >> ~/.bashrc
source ~/.bashrc

# Install MongoDB
sudo apt update
wget https://repo.mongodb.org/apt/ubuntu/dists/jammy/mongodb-org/7.0/multiverse/binary-amd64/mongodb-org-server_7.0.0_amd64.deb
sudo dpkg -i mongodb-org-server_7.0.0_amd64.deb
sudo apt-get install -f
sudo service mongod start
sudo systemctl enable mongod

# Install Apache
sudo apt update
sudo apt install apache2

# Activate your Conda environment (change 'django_env' to your environment name)
conda activate django_env

# Navigate to your Django project directory
cd /path/to/your/django_project

# Install Python packages from requirements.txt
pip install -r /path/to/requirements.txt

# Apply Django migrations
python manage.py migrate

# Collect Django static files
python manage.py collectstatic --noinput

# Configure Apache for serving the Django project (if you have specific Apache configurations)
# Copy your Apache configuration to /etc/apache2/sites-available/ and enable the site
# sudo cp /path/to/your_apache_config.conf /etc/apache2/sites-available/
# sudo a2ensite your_apache_config.conf
# sudo service apache2 restart

# Run MongoDB in the background (assuming it's already started)
sudo service mongod start
sudo systemctl enable mongod

# Run Django using Gunicorn in the background
gunicorn --bind 0.0.0.0:8000 your_project_name.wsgi &

# Display




===============
#!/bin/bash

# Install Miniconda
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
chmod +x Miniconda3-latest-Linux-x86_64.sh
./Miniconda3-latest-Linux-x86_64.sh -b -p ~/miniconda3
export PATH=~/miniconda3/bin:$PATH
echo "export PATH=~/miniconda3/bin:\$PATH" >> ~/.bashrc
source ~/.bashrc

# Install MongoDB
sudo apt update
wget https://repo.mongodb.org/apt/ubuntu/dists/jammy/mongodb-org/7.0/multiverse/binary-amd64/mongodb-org-server_7.0.0_amd64.deb
sudo dpkg -i mongodb-org-server_7.0.0_amd64.deb
sudo apt-get install -f
sudo service mongod start
sudo systemctl enable mongod

# Install Apache
sudo apt update
sudo apt install apache2

# Create a Conda environment
conda create -n django_env python=3.8
conda activate django_env

# Navigate to your Django project directory
cd ~/Downloads/footballresults_django  # Replace with your actual project path

# Install Python packages from requirements.txt
pip install -r requirements.txt

# Apply Django migrations
python manage.py migrate

# Collect Django static files
python manage.py collectstatic --noinput

# Run MongoDB in the background (assuming it's already started)
sudo service mongod start
sudo systemctl enable mongod

# Run Django using Gunicorn in the background
gunicorn --bind 0.0.0.0:8000 footballresults_django.wsgi:application &

# Display final instructions
echo "Django project setup complete!"
echo "You can access your project at http://localhost/"


=================================
chmod +x install.sh
./install.sh





====1111


#!/bin/bash

# Update the system
sudo apt-get update
sudo apt-get upgrade -y


sudo systemctl start mongod
sudo systemctl enable mongod


conda create -n myenv python=3.8
conda activate myenv

# Install Django and Gunicorn
# pip install -r requirements.txt

cd ~/Downloads/

# Install project dependencies
pip install -r requirements.txt

# Configure Gunicorn (adjust the number of workers as needed)
gunicorn your_project.wsgi:application --workers 4 --bind 0.0.0.0:8000 &

# Install Apache2
sudo apt-get install -y apache2
sudo a2enmod proxy
sudo a2enmod proxy_http

# Create an Apache virtual host config for your project
sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/your_project.conf
sudo nano /etc/apache2/sites-available/your_project.conf

# Add the following lines to your virtual host config
# <VirtualHost *:80>
#     ServerName your_domain.com
#     ProxyPass / http://127.0.0.1:8000/
#     ProxyPassReverse / http://127.0.0.1:8000/
# </VirtualHost>

# Enable the virtual host
sudo a2ensite your_project.conf

# Install Certbot for SSL certificate
sudo apt-get install -y certbot python3-certbot-apache
sudo certbot --apache

# Set up systemd service for Gunicorn
sudo nano /etc/systemd/system/your_project.service

# Add the following lines to the service file
# [Unit]
# Description=gunicorn daemon for your project
# After=network.target

# [Service]
# User=yourusername
# Group=yourusername
# WorkingDirectory=/path/to/your/project
# ExecStart=/path/to/your/conda/env/bin/gunicorn your_project.wsgi:application --workers 4 --bind unix:/path/to/your/project/your_project.sock

# [Install]
# WantedBy=multi-user.target

# Start and enable the systemd service
sudo systemctl start your_project
sudo systemctl enable your_project

# Configure firewall
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp
sudo ufw enable

# Reboot to apply changes
sudo reboot
